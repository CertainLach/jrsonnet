[package]
name = "jrsonnet"
description = "Rust jsonnet implementation"
authors.workspace = true
edition.workspace = true
license.workspace = true
repository.workspace = true
version.workspace = true

[lints]
workspace = true

[features]
experimental = [
    "exp-preserve-order",
    "exp-destruct",
    "exp-null-coaelse",
    "exp-object-iteration",
    "exp-bigint",
    "exp-apply",
    "exp-regex",
]
# Use mimalloc as allocator
mimalloc = ["mimallocator"]
# Experimental feature, which allows to preserve order of object fields
exp-preserve-order = [
    "jrsonnet-evaluator/exp-preserve-order",
    "jrsonnet-cli/exp-preserve-order",
]
# Destructuring of locals
exp-destruct = ["jrsonnet-evaluator/exp-destruct"]
# Iteration over objects yields [key, value] elements
exp-object-iteration = ["jrsonnet-evaluator/exp-object-iteration"]
# Bigint type
exp-bigint = ["jrsonnet-evaluator/exp-bigint", "jrsonnet-cli/exp-bigint"]
# std.regex and co.
exp-regex = ["jrsonnet-cli/exp-regex"]
# obj?.field, obj?.['field']
exp-null-coaelse = [
    "jrsonnet-evaluator/exp-null-coaelse",
    "jrsonnet-parser/exp-null-coaelse",
    "jrsonnet-cli/exp-null-coaelse",
]
# --exp-apply
exp-apply = []

nightly = ["jrsonnet-evaluator/nightly"]

[dependencies]
jrsonnet-evaluator.workspace = true
jrsonnet-parser.workspace = true
jrsonnet-cli.workspace = true
jrsonnet-gcmodule.workspace = true

mimallocator = { workspace = true, optional = true }
thiserror.workspace = true
clap = { workspace = true, features = ["derive"] }
clap_complete.workspace = true
serde_json.workspace = true
serde = { workspace = true, features = ["derive"] }
hi-doc.workspace = true
