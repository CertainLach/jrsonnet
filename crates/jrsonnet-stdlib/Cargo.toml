[package]
name = "jrsonnet-stdlib"
description = "jsonnet standard library packaged as crate"
authors.workspace = true
edition.workspace = true
license.workspace = true
repository.workspace = true
version.workspace = true

[lints]
workspace = true

[features]
default = ["codegenerated-stdlib"]
# Speed-up initialization by generating code for parsed stdlib,
# instead of invoking parser for it.
# This is mutually exclusive with `serialized-stdlib`.
codegenerated-stdlib = ["jrsonnet-parser/structdump"]
# Use the embedded serialized stdlib.
# This is mutually exclusive with `codegenerated-stdlib`.
serialized-stdlib = []
# Enables legacy `std.thisFile` support, at the cost of worse caching
legacy-this-file = []
# Add order preservation flag to some functions
exp-preserve-order = ["jrsonnet-evaluator/exp-preserve-order"]
# Bigint type
exp-bigint = ["dep:num-bigint", "jrsonnet-evaluator/exp-bigint"]

exp-null-coaelse = ["jrsonnet-parser/exp-null-coaelse", "jrsonnet-evaluator/exp-null-coaelse"]
# std.regexMatch and other helpers
exp-regex = ["dep:regex", "dep:lru", "dep:rustc-hash"]

[dependencies]
jrsonnet-evaluator.workspace = true
jrsonnet-macros.workspace = true
jrsonnet-parser.workspace = true
jrsonnet-gcmodule.workspace = true

# Used for stdlib AST serialization
bincode = { workspace = true, optional = true }
# Used both for stdlib AST serialization and std.parseJson/std.parseYaml
serde.workspace = true

# std.md5
md5.workspace = true
# std.sha1
sha1.workspace = true
# std.sha256, std.sha512
sha2.workspace = true
# std.sha3
sha3.workspace = true
# std.base64
base64.workspace = true
# std.parseJson
serde_json.workspace = true
# std.parseYaml, custom library fork is used for C++/golang compatibility
serde_yaml_with_quirks.workspace = true

num-bigint = { workspace = true, optional = true }

# regex
regex = { workspace = true, optional = true }
lru = { workspace = true, optional = true }
rustc-hash = { workspace = true, optional = true }

[build-dependencies]
jrsonnet-parser.workspace = true
structdump = { workspace = true, features = ["derive"] }
