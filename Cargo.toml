[workspace]
members = ["crates/*", "bindings/jsonnet", "cmds/*", "tests", "xtask"]
default-members = ["cmds/jrsonnet"]
resolver = "2"

[workspace.package]
authors = ["Yaroslav Bolyukin <iam@lach.pw>"]
edition = "2021"
license = "MIT"
repository = "https://github.com/CertainLach/jrsonnet"
version = "0.5.0-pre96"

[workspace.dependencies]
jrsonnet-evaluator = { path = "./crates/jrsonnet-evaluator", version = "0.5.0-pre96" }
jrsonnet-macros = { path = "./crates/jrsonnet-macros", version = "0.5.0-pre96" }
jrsonnet-parser = { path = "./crates/jrsonnet-parser", version = "0.5.0-pre96" }
jrsonnet-rowan-parser = { path = "./crates/jrsonnet-rowan-parser", version = "0.5.0-pre96" }
jrsonnet-interner = { path = "./crates/jrsonnet-interner", version = "0.5.0-pre96" }
jrsonnet-stdlib = { path = "./crates/jrsonnet-stdlib", version = "0.5.0-pre96" }
jrsonnet-cli = { path = "./crates/jrsonnet-cli", version = "0.5.0-pre96" }
jrsonnet-types = { path = "./crates/jrsonnet-types", version = "0.5.0-pre96" }
jrsonnet-gcmodule = { version = "0.3.7" }
# Diagnostics.
# hi-doc is my library, which handles text formatting very well, but isn't polished enough yet
# Previous implementation was based on annotate-snippets, which I don't like for many reasons.
#
# I'm against using miette, because I want to reuse data between interpreter and annotations, yet miette
#   and other libraries want to handle spans etc by itself, which is okay for compiler diagnostics, but is
#   bad for interpreter, where interpreter and parser are paired much closer.
hi-doc = "0.1.1"
annotate-snippets = "0.10.1"

# CLI
clap = "4.5"
clap_complete = "4.5"

# Parsing, manifestification is implemented manually everywhere
# Note on serde_yaml_with_quirks: This is a fork of serde-yaml with legacy yaml 1.1 support:
# https://github.com/dtolnay/serde-yaml/pull/225
serde = "1.0.197"
serde_json = "1.0.114"
serde_yaml_with_quirks = "0.8.24"

# Error handling
anyhow = "1.0.83"
thiserror = "1.0.60"

# Code formatting
dprint-core = "0.65.0"

# Stdlib hashing functions
md5 = "0.7.0"
sha1 = "0.10.6"
sha2 = "0.10.8"
sha3 = "0.10.8"

# Source code parsing.
# Jrsonnet has two parsers for jsonnet - one is for execution, and another is for better parsing diagnostics/lints/LSP.
# First (and fast one) is based on peg, second is based on rowan.
peg = "0.8.3"
logos = "0.14.0"
ungrammar = "1.16.1"
rowan = "0.15.15"

mimallocator = "0.1.3"
indoc = "2.0"
insta = "1.39"
tempfile = "3.10"
pathdiff = "0.2.1"
hashbrown = "0.14.5"
static_assertions = "1.1"
rustc-hash = "1.1"
num-bigint = "0.4.5"
derivative = "2.2.0"
strsim = "0.11.0"
proc-macro2 = "1.0"
quote = "1.0"
syn = "2.0"
drop_bomb = "0.1.5"
base64 = "0.22.1"
indexmap = "2.2.3"
itertools = "0.13.0"
xshell = "0.2.6"

lsp-server = "0.7.6"
lsp-types = "0.96.0"

regex = "1.10"
lru = "0.12.3"

json-structural-diff = "0.1.0"
syn-dissect-closure = "0.1.0"

[workspace.lints.rust]
unsafe_op_in_unsafe_fn = "deny"

# TODO: add docs everywhere
# missing_doc = "warn"

elided_lifetimes_in_paths = "allow"
explicit_outlives_requirements = "allow"
noop_method_call = "allow"
single_use_lifetimes = "allow"
variant_size_differences = "allow"
macro_expanded_macro_exports_accessed_by_absolute_paths = "allow"

[workspace.lints.rustdoc]
all = "warn"

[workspace.lints.clippy]
all = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }

ptr_arg = "allow"
# Too verbose
must_use_candidate = "allow"
# A lot of functions pass around errors thrown by code
missing_errors_doc = "allow"
# A lot of pointers have interior Rc
needless_pass_by_value = "allow"
# Its fine
wildcard_imports = "allow"
enum_glob_use = "allow"
module_name_repetitions = "allow"
# TODO: fix individual issues, however this works as intended almost everywhere
cast_precision_loss = "allow"
cast_possible_wrap = "allow"
cast_possible_truncation = "allow"
cast_sign_loss = "allow"
# False positives
# https://github.com/rust-lang/rust-clippy/issues/6902
use_self = "allow"
# https://github.com/rust-lang/rust-clippy/issues/8539
iter_with_drain = "allow"
type_repetition_in_bounds = "allow"
# ci is being run with nightly, but library should work on stable
missing_const_for_fn = "allow"
# too many false-positives with .expect() calls
missing_panics_doc = "allow"
# false positive for IStr type. There is an configuration option for
# such cases, but it doesn't work:
# https://github.com/rust-lang/rust-clippy/issues/9801
mutable_key_type = "allow"
# false positives
redundant_pub_crate = "allow"
# Sometimes code is fancier without that
manual_let_else = "allow"
# Something is broken about that lint, can't be allowed for
# codegenerated-stdlib block
similar_names = "allow"

#[profile.test]
#opt-level = 1

[profile.release]
opt-level = 3
lto = "fat"
codegen-units = 1
debug = 0
panic = "abort"
strip = true

[profile.releasedebug]
inherits = "release"
debug = 2
panic = "unwind"
strip = false
